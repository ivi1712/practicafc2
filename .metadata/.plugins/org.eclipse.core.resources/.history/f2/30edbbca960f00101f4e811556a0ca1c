/*---------------------------------------------------------------------
**
**  Fichero:
**    fun_asm.asm  01/05/2025
**
**    (c) J.M. Mendias
**    Fundamentos de Computadores II
**    Facultad de Informática. Universidad Complutense de Madrid
**
**  Propósito:
**    Fichero de código para la práctica 5
**
**-------------------------------------------------------------------*/

.data
    .text
    .globl matrixCopy
# void matrixCopy(int n, int x[n][n], int z[n][n])
matrixCopy:
    # Prologo: salvamos los registros s0, s1 y s2 (usados para n, i y j)
    addi    sp, sp, -12
    sw      s0, 0(sp)
    sw      s1, 4(sp)
    sw      s2, 8(sp)

    mv      s0, a0         # s0 = n
    li      s1, 0          # i = 0
copy_loop_i:
    bge     s1, s0, copy_end
    li      s2, 0          # j = 0
copy_loop_j:
    bge     s2, s0, copy_next_i
    # Calcular el offset: (i*n + j)*4
    mul     t0, s1, s0     # t0 = i*n
    add     t0, t0, s2     # t0 = i*n + j
    slli    t0, t0, 2      # t0 = (i*n+j)*4
    # Copiar: z[i][j] = x[i][j]
    add     t1, a1, t0     # t1 = dirección de x[i][j]
    lw      t1, 0(t1)      # t1 = x[i][j]
    add     t2, a2, t0     # t2 = dirección de z[i][j]
    sw      t1, 0(t2)      # z[i][j] = x[i][j]
    addi    s2, s2, 1      # j++
    j       copy_loop_j
copy_next_i:
    addi    s1, s1, 1      # i++
    j       copy_loop_i
copy_end:
    lw      s0, 0(sp)
    lw      s1, 4(sp)
    lw      s2, 8(sp)
    addi    sp, sp, 12
    ret

    .globl matrixMul
# void matrixMul(int n, int x[n][n], int y[n][n], int z[n][n])
matrixMul:
    # Prologo: salvamos s0-s3 (usados para n, i, j y k)
    addi    sp, sp, -16
    sw      s0, 0(sp)
    sw      s1, 4(sp)
    sw      s2, 8(sp)
    sw      s3, 12(sp)

    mv      s0, a0         # s0 = n
    li      s1, 0          # i = 0
mul_loop_i:
    bge     s1, s0, mul_end
    li      s2, 0          # j = 0
mul_loop_j:
    bge     s2, s0, mul_next_i
    # Calcular dirección de z[i][j]:
    mul     t0, s1, s0     # t0 = i*n
    add     t0, t0, s2     # t0 = i*n + j
    slli    t0, t0, 2      # t0 = offset en bytes
    add     t0, a3, t0     # t0 = &z[i][j]
    li      t2, 0          # acumulador = 0
    li      s3, 0          # k = 0
mul_loop_k:
    bge     s3, s0, mul_finish_j
    # Cargar x[i][k]:
    mul     t3, s1, s0     # t3 = i*n
    add     t3, t3, s3     # t3 = i*n + k
    slli    t3, t3, 2      # t3 = offset
    add     t4, a1, t3     # t4 = &x[i][k]
    lw      t4, 0(t4)      # t4 = x[i][k]
    # Cargar y[k][j]:
    mul     t5, s3, s0     # t5 = k*n
    add     t5, t5, s2     # t5 = k*n + j
    slli    t5, t5, 2      # t5 = offset
    add     t5, a2, t5     # t5 = &y[k][j]
    lw      t5, 0(t5)      # t5 = y[k][j]
    # Multiplicar y acumular:
    mul     t1, t4, t5     # t1 = x[i][k] * y[k][j]
    add     t2, t2, t1     # acumulador += t1
    addi    s3, s3, 1      # k++
    j       mul_loop_k
mul_finish_j:
    sw      t2, 0(t0)      # z[i][j] = acumulador
    addi    s2, s2, 1      # j++
    j       mul_loop_j
mul_next_i:
    addi    s1, s1, 1      # i++
    j       mul_loop_i
mul_end:
    lw      s0, 0(sp)
    lw      s1, 4(sp)
    lw      s2, 8(sp)
    lw      s3, 12(sp)
    addi    sp, sp, 16
    ret

    .globl matrixPow
# void matrixPow(int n, int x[n][n], int e, int z[n][n])
# Se crea en pila la matriz auxiliar aux para los resultados parciales.
matrixPow:
    # Prologo: salvamos s0-s5.
    # s0: n, s1 y s2: contadores temporales, s3: contador para la potencia,
    # s4: guardaremos el puntero a la matriz resultado (z) y
    # s5: guardaremos el puntero a la matriz x.
    addi    sp, sp, -24
    sw      s0, 0(sp)
    sw      s1, 4(sp)
    sw      s2, 8(sp)
    sw      s3, 12(sp)
    sw      s4, 16(sp)
    sw      s5, 20(sp)

    mv      s0, a0         # s0 = n
    mv      s4, a3         # s4 = puntero a z (resultado)
    mv      s5, a1         # s5 = puntero a x

    # Calcular tamaño de aux: aux_size = n*n*4
    mul     t0, s0, s0
    slli    t0, t0, 2      # t0 = n*n*4
    # Reservar espacio para aux en la pila
    sub     sp, sp, t0     # aux se ubica en sp
    mv      t1, sp         # t1 = puntero a aux

    # Inicializar z a la matriz identidad:
    li      s1, 0         # s1 = índice j
init_loop_j_pow:
    bge     s1, s0, init_done_pow
    li      s2, 0         # s2 = índice k
init_loop_k_pow:
    bge     s2, s0, next_j_init_pow
    # Calcular dirección de z[j][k]: offset = (j*n + k)*4
    mul     t2, s1, s0
    add     t2, t2, s2
    slli    t2, t2, 2
    add     t2, s4, t2    # t2 = &z[j][k]
    # Si j == k -> 1, sino 0
    beq     s1, s2, set_one_pow
    li      t3, 0
    j       store_z_pow
set_one_pow:
    li      t3, 1
store_z_pow:
    sw      t3, 0(t2)
    addi    s2, s2, 1
    j       init_loop_k_pow
next_j_init_pow:
    addi    s1, s1, 1
    j       init_loop_j_pow
init_done_pow:
    # Guardar el exponente (e) en t4
    mv      t4, a2        # t4 = e
    li      s3, 1         # s3 = contador de potencia (inicia en 1)
exp_loop_pow:
    bgt     s3, t4, exp_done_pow
    # Llamada a: matrixMul(n, x, z, aux)
    # Se usan: a0 = n, a1 = x (guardado en s5), a2 = z (guardado en s4), a3 = aux (t1)
    mv      a0, s0
    mv      a1, s5
    mv      a2, s4
    mv      a3, t1
    call    matrixMul
    # Llamada a: matrixCopy(n, aux, z)
    mv      a0, s0
    mv      a1, t1       # aux
    mv      a2, s4
    call    matrixCopy
    addi    s3, s3, 1
    j       exp_loop_pow
exp_done_pow:
    # Liberar espacio reservado para aux (se suma t0 al sp)
    add     sp, sp, t0
    # Restaurar registros salvados y liberar marco de pila
    lw      s5, 20(sp)
    lw      s4, 16(sp)
    lw      s3, 12(sp)
    lw      s2, 8(sp)
    lw      s1, 4(sp)
    lw      s0, 0(sp)
    addi    sp, sp, 24
    ret
