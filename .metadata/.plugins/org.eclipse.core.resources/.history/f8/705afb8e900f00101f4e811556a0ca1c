/*---------------------------------------------------------------------
**
**  Fichero:
**    fun_asm.asm  01/05/2025
**
**    (c) J.M. Mendias
**    Fundamentos de Computadores II
**    Facultad de Informática. Universidad Complutense de Madrid
**
**  Propósito:
**    Fichero de código para la práctica 5
**
**-------------------------------------------------------------------*/

.data
.text

.extern _stack
.global matrixPow

/*
void matrixCopy(int n, int x[n][n], int z[n][n]) {
 for (int i = 0; i < n; i++)
 for (int j = 0; j < n; j++)
 z[i][j] = x[i][j];
}
*/

matrix_copy:
	li t0, 0 // t0 = i

for_f_mc:
	bge t0, a0, end_f_for_mc
	li t1, 0 // t1 = j
for_s_mc:
	bge t1, a0, end_s_for_mc
	mul t2, t0, a0 // i * n
    add t2, t2, t1 // i * n + j
    slli t2, t2, 2 // (i * n + j) * 4
    add t3, a2, t2  // z[i][j] adress
    add t4, a1, t2 // x[i][j] adress
    lw t4,0(t4) // valor x[i][j]
    sw t4, 0(t3) // z[i][j] = x[i][j]
    addi t1, t1, 1
    j for_s_mc
end_s_for_mc:
	addi t0, t0, 1
	j for_f_mc
end_f_for_mc:
	ret

matrix_mul:
	li t0, 0 // t0 = i

for_f_mm:
	bge t0, a0, end_f_for_mm
	li t1, 0 // t1 = j
for_s_mm:
	bge t1, a0, end_s_for_mm
	mul t2, t0, a0 // i * n
    add t2, t2, t1 // i * n + j
    slli t2, t2, 2 // (i * n + j) * 4
    add t3, a2, t2  // z[i][j] adress
    sw zero, 0(t3) // z[i][j] = 0
	li t4, 0 // t4 = k
for_t_mm:
	bge t4, a0, end_t_for_mm
	//lw t5, 0(t3) // valor z[i][j]
	mul t5, t0, a0  //i * n
    add t5, t5, t4  //i * n + k
    slli t5, t5, 2  //(i * n + k) * 4
	add t6, a3, t5 // x[i][k] adress
	lw t5, 0(t6)

	mul t6, t4, a0  //k * n
    add t6, t6, t1  //k * n + j
    slli t6, t6, 2  //(i * n + k) * 4
	add t2, a3, t6 // y[k][j] adress
	lw t6, 0(t2) // valor y[k][j]

	mul t6, t5, t6 //x[i][k] * y[k][j]

	lw t5, 0(t3) //z[i][j]
	add t5, t5, t6 //z[i][j] += x[i][k] * y[k][j]
    sw t5, 0(t3)
    addi t4, t4, 1 // k++
    j for_t_mm
end_t_for_mm:
	addi t1, t1, 1 // j++
	j for_s_mm
end_s_for_mm:
	addi t0, t0, 1 // i++
	j for_f_mm
end_f_for_mm:
	ret
    .data
    .text

    .extern _stack
    .global matrixPow

/*
 * void matrixPow(int n, int x[n][n], int e, int z[n][n]) {
 *    int aux[n][n];
 *    // Inicializa z como matriz identidad:
 *    for (int j = 0; j < n; j++)
 *       for (int k = 0; k < n; k++)
 *          z[j][k] = (j == k) ? 1 : 0;
 *
 *    for (int i = 1; i <= e; i++) {
 *         matrixMul(n, x, z, aux);
 *         matrixCopy(n, aux, z);
 *    }
 * }
 */

matrixPow:
    // --- Reserva del marco global de matrixPow (24 bytes) ---
    la   sp, _stack           // sp = base de la pila
    addi sp, sp, -24          // Reserva 24 bytes
    sw   ra, 20(sp)
    sw   s0, 16(sp)           // s0 almacenará n
    sw   s1, 12(sp)           // s1 almacenará el puntero a z
    sw   s4, 8(sp)            // s4: contador (iteración i)
    sw   s5, 4(sp)            // s5: exponente e
    sw   s6, 0(sp)            // s6: puntero a x

    // --- Mueve los argumentos de entrada a registros preservados ---
    mv   s0, a0         // s0 = n
    mv   s6, a1         // s6 = puntero a x
    mv   s5, a2         // s5 = e (exponente)
    mv   s1, a3         // s1 = puntero a z

    // --- Inicializa z como matriz identidad:
    // for (j = 0; j < n; j++)
    //   for (k = 0; k < n; k++)
    //     z[j][k] = (j == k) ? 1 : 0
    li   t0, 0         // t0 = j (iterador de filas)
init_identity_j:
    bge  t0, s0, identity_done
    li   t1, 0         // t1 = k (iterador de columnas)
init_identity_k:
    bge  t1, s0, next_row_identity
    // Calcula offset = (j * n + k) * 4
    mul  t2, t0, s0    // t2 = j * n
    add  t2, t2, t1    // t2 = j*n + k
    slli t2, t2, 2     // t2 = (j*n + k) * 4
    add  t3, s1, t2   // t3 = dirección de z[j][k]
    beq  t0, t1, set_one
    li   t4, 0
    j    store_val
set_one:
    li   t4, 1
store_val:
    sw   t4, 0(t3)
    addi t1, t1, 1
    j    init_identity_k
next_row_identity:
    addi t0, t0, 1
    j    init_identity_j
identity_done:

    // --- Bucle de potenciación: for (i = 1; i <= e; i++) ---
    li   s4, 1         // s4 = contador de iteración (i) = 1
exp_loop:
    bgt  s4, s5, exp_done   // si s4 (i) > e, terminar

    // -- Reserva de un bloque fijo ("submarco") para llamadas (44 bytes) --
    addi sp, sp, -44
    // Guarda en este bloque los registros que necesitaremos recuperar
    sw   s0, 40(sp)    // n
    sw   s6, 36(sp)    // puntero a x
    sw   s1, 32(sp)    // puntero a z
    sw   ra, 28(sp)
    sw   s4, 24(sp)    // contador i
    sw   s5, 20(sp)    // exponente e
    // Guarda la dirección base de este bloque en s3 (registro preservado)
    mv   s3, sp       // s3 = dirección base del bloque fijo

    // -- Reserva de espacio para la matriz aux --
    // El tamaño de aux es: n * n * 4 bytes
    mul  t6, s0, s0   // t6 = n * n
    slli t6, t6, 2    // t6 = n*n*4  (tamaño en bytes de aux)
    sub  sp, sp, t6   // Reserva aux: decrementa sp en t6 bytes
    mv   s2, sp      // s2 = puntero a aux

    // --- Llamada a matrixMul(n, x, z, aux) ---
    mv   a0, s0      // a0 = n
    mv   a1, s6      // a1 = puntero a x
    mv   a2, s1      // a2 = puntero a z (resultado actual)
    mv   a3, s2      // a3 = puntero a aux
    call matrixMul

    // --- Llamada a matrixCopy(n, aux, z) ---
    mv   a0, s0      // a0 = n
    mv   a1, s2      // a1 = puntero a aux
    mv   a2, s1      // a2 = puntero a z
    call matrixCopy

    // -- Libera el área reservada para aux --
    add  sp, sp, t6  // Libera aux; sp vuelve a apuntar al inicio del bloque fijo (s3)
    // -- Libera el bloque fijo (submarco) reservado para la llamada --
    addi sp, sp, 44

    addi s4, s4, 1    // Incrementa el contador del bucle (i++)
    j    exp_loop
exp_done:
    // --- Restaura el marco global de matrixPow ---
    lw   s6, 0(sp)
    lw   s5, 4(sp)
    lw   s4, 8(sp)
    lw   s1, 12(sp)
    lw   s0, 16(sp)
    lw   ra, 20(sp)
    addi sp, sp, 24
    ret

    /*
matrixPow:
	la sp , _stack
	// objetos en pila: s1, s2, s3, ra
	/*
	addi sp, sp, -20
	sw ra, 16(sp)
	sw s1, 12(sp)
	sw s2, 8(sp)
	sw s3, 4(sp)
	sw s4, 0(sp)


	mv s1, a3 // s1 =  z

	// reserva de espacio aux en pila
	mul s3, a0, a0 // s3 = n^2
	slli s3, s3, 2 // s3 = n^2 * 4
	add s2, sp, s3 // s2 apunta a aux
	//mv s2, sp // s2 apunta aux

	li t0, 0 // t0 = j

for_j:
	bge t0, a0, end_j
	li t1, 0 // t1 = k
for_k:
	bge t1, a0, end_k
	mul t2, t0, a0 // j*n
	add t2, t2, t1 // j*n + k
	slli t2, t2, 2 // t2 = (j*n + k)*4
	add t3, s1, t2 // z[j][k]

	bne t0, t1, else_k
	li t4, 1
	j save_k
else_k:
	li t4, 0
save_k:
	sw t4, 0(t3)
	addi t1, t1, 1 //k++
	j for_k

end_k:
	addi t0, t0, 1// j++
	j for_j
end_j:
	li s4, 1 // s4 = i
	/*
	for (int i = 1; i <= e; i++) {
 		matrixMul(n, x, z, aux);
 		matrixCopy(n, aux, z);
 	}
 */
 /*
 	mv s5, a2
for_i:
	bgt s4, s5, end_i
	mv a2, a3
	mv s6, a3
	addi sp, sp, -44
	sw a0, 40(sp)
	sw a1, 36(sp)
	sw a2, 32(sp)
	sw a3, 28(sp)
	sw ra, 24(sp)
	sw s1, 20(sp)
	sw s3, 12(sp)
	sw s4, 8(sp)
	sw s5, 4(sp)
	sw s6, 0(sp)
	mul s3, a0, a0 // s3 = n^2
	slli s3, s3, 2 // s3 = n^2 * 4
	sub s2, sp, s3 // s2 apunta a aux (addi s2, sp, -100)
	sw s2, 16(sp)
	mv a3, s2

	call matrixMul
	//mv a1, s6
	lw a0, 40(sp)
	lw a1, 16(sp)
	lw a2, 20(sp)
	call matrix_copy
	lw a0, 40(sp)
	lw a1, 36(sp)
	lw a2, 32(sp)
	lw a3, 28(sp)
	lw ra, 24(sp)
	lw s1, 20(sp)
	lw s2, 16(sp)
	lw s3, 12(sp)
	lw s4, 8(sp)
	lw s5, 4(sp)
	lw s6, 0(sp)
	addi sp, sp, 44
	addi s4, s4, 1 // i++
end_i:
	ret

*/
