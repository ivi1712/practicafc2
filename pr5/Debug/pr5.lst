
pr5.elf:     file format elf32-littleriscv
pr5.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001f8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x0000023c memsz 0x0000023c flags r-x
    LOAD off    0x00002000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000064 memsz 0x000000cc flags rw-

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .text             000001f8  00000000  00000000  00001000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text.main        00000044  000001f8  000001f8  000011f8  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data.graph       00000064  00010000  00010000  00002000  2**2  CONTENTS, ALLOC, LOAD, DATA
  3 .bss.z            00000064  00010064  00010064  00002064  2**2  ALLOC
  4 .sbss.paths       00000004  000100c8  000100c8  00002064  2**2  ALLOC
  5 .riscv.attributes 00000021  00000000  00000000  00002064  2**0  CONTENTS, READONLY
  6 .comment          00000012  00000000  00000000  00002085  2**0  CONTENTS, READONLY
  7 .debug_line       0000038d  00000000  00000000  00002097  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_info       000000ba  00000000  00000000  00002424  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev     00000091  00000000  00000000  000024de  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges    00000040  00000000  00000000  00002570  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str        000023fd  00000000  00000000  000025b0  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges     00000010  00000000  00000000  000049ad  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro      00000711  00000000  00000000  000049bd  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_frame      0000002c  00000000  00000000  000050d0  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
000001f8 l    d  .text.main	00000000 .text.main
00010000 l    d  .data.graph	00000000 .data.graph
00010064 l    d  .bss.z	00000000 .bss.z
000100c8 l    d  .sbss.paths	00000000 .sbss.paths
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./fun_asm.o
00000014 l       .text	00000000 ciclo_i
0000004c l       .text	00000000 fin_copia
0000001c l       .text	00000000 ciclo_j
00000044 l       .text	00000000 siguiente_i
00000078 l       .text	00000000 ciclo_i_mult
000000f0 l       .text	00000000 fin_mult
00000080 l       .text	00000000 ciclo_j_mult
000000e8 l       .text	00000000 siguiente_i_mult
0000009c l       .text	00000000 ciclo_k_mult
000000e0 l       .text	00000000 siguiente_j_mult
0000014c l       .text	00000000 init_loop_j_pow
0000018c l       .text	00000000 init_done_pow
00000154 l       .text	00000000 init_loop_k_pow
00000184 l       .text	00000000 next_j_init_pow
00000174 l       .text	00000000 set_one_pow
00000178 l       .text	00000000 store_z_pow
00000194 l       .text	00000000 exp_loop_pow
000001c4 l       .text	00000000 exp_done_pow
00000000 l    df *ABS*	00000000 pr5.c
00000000 g       .text	00000000 matrixCopy
00000108 g       .text	00000000 matrixPow
00010064 g     O .bss.z	00000064 z
00010000 g     O .data.graph	00000064 graph
0000005c g       .text	00000000 matrixMul
000001f8 g     F .text.main	00000044 main
000100c8 g     O .sbss.paths	00000004 paths
00020000 g       *ABS*	00000000 _stack



Disassembly of section .text:

00000000 <matrixCopy>:
matrixCopy():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:21
    .text
    .globl matrixCopy
// void matrixCopy(int n, int x[n][n], int z[n][n])
matrixCopy:
    // Entrada: a0 = n, a1 = puntero a x (matriz origen), a2 = puntero a z (matriz destino)
    addi sp, sp, -8
   0:	ff810113          	addi	sp,sp,-8
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:22
    sw ra, 4(sp)
   4:	00112223          	sw	ra,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:23
    sw s0, 0(sp)           // Guardar s0 (registro preservado)
   8:	00812023          	sw	s0,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:24
    mv s0, sp              // Configurar el marco de pila
   c:	00010413          	mv	s0,sp
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:26

    mv t0, x0              // t0 = i
  10:	00000293          	li	t0,0

00000014 <ciclo_i>:
ciclo_i():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:28
ciclo_i:
    bgt t0, a0, fin_copia  // Si i == n, terminamos
  14:	02554c63          	blt	a0,t0,4c <fin_copia>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:30

    mv t1, x0              // t1 = j
  18:	00000313          	li	t1,0

0000001c <ciclo_j>:
ciclo_j():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:32
ciclo_j:
    bgt t1, a0, siguiente_i // Si j == n
  1c:	02654463          	blt	a0,t1,44 <siguiente_i>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:35

    //  desplazamiento = (i * n + j) * 4
    mul t2, t0, a0         // t2 = i * n
  20:	02a283b3          	mul	t2,t0,a0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:36
    add t2, t2, t1         //t2 = i * n + j
  24:	006383b3          	add	t2,t2,t1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:37
    slli t2, t2, 2         // t2 = (i * n + j) * 4
  28:	00239393          	slli	t2,t2,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:40

    //Se COpia elemento x[i][j] en z[i][j]
    add t3, a1, t2         // t3 = dirección de x[i][j]
  2c:	00758e33          	add	t3,a1,t2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:41
    lw t4, 0(t3)           // t4 = x[i][j]
  30:	000e2e83          	lw	t4,0(t3)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:42
    add t5, a2, t2         // t5 = dirección de z[i][j]
  34:	00760f33          	add	t5,a2,t2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:43
    sw t4, 0(t5)           // z[i][j] = t4
  38:	01df2023          	sw	t4,0(t5)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:45

    addi t1, t1, 1         // Incrementa j
  3c:	00130313          	addi	t1,t1,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:46
    j ciclo_j
  40:	fddff06f          	j	1c <ciclo_j>

00000044 <siguiente_i>:
siguiente_i():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:49

siguiente_i:
    addi t0, t0, 1         // Incrementa i
  44:	00128293          	addi	t0,t0,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:50
    j ciclo_i
  48:	fcdff06f          	j	14 <ciclo_i>

0000004c <fin_copia>:
fin_copia():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:53

fin_copia:
    lw ra, 4(sp)
  4c:	00412083          	lw	ra,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:54
    lw s0, 0(sp)
  50:	00012403          	lw	s0,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:55
    addi sp, sp, 8
  54:	00810113          	addi	sp,sp,8
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:56
    ret
  58:	00008067          	ret

0000005c <matrixMul>:
matrixMul():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:61

.globl matrixMul
matrixMul:
    // Entrada: a0 = n, a1 = puntero a x, a2 = puntero a y, a3 = puntero a z
    addi sp, sp, -16
  5c:	ff010113          	addi	sp,sp,-16
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:62
    sw   ra, 12(sp)
  60:	00112623          	sw	ra,12(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:63
    sw   s0, 8(sp)
  64:	00812423          	sw	s0,8(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:64
    sw   s1, 4(sp)
  68:	00912223          	sw	s1,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:65
    sw   s2, 0(sp)
  6c:	01212023          	sw	s2,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:66
    mv   s0, sp
  70:	00010413          	mv	s0,sp
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:68

    mv   t0, x0              // t0 = i
  74:	00000293          	li	t0,0

00000078 <ciclo_i_mult>:
ciclo_i_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:70
ciclo_i_mult:
    bgt  t0, a0, fin_mult    // Si i > n, terminamos
  78:	06554c63          	blt	a0,t0,f0 <fin_mult>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:72

    mv   t1, x0              // t1 = j
  7c:	00000313          	li	t1,0

00000080 <ciclo_j_mult>:
ciclo_j_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:74
ciclo_j_mult:
    bgt  t1, a0, siguiente_i_mult  // Si j > n, terminamos con esta fila
  80:	06654463          	blt	a0,t1,e8 <siguiente_i_mult>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:77

    // Inicializa z[i][j] a 0
    mul  t2, t0, a0         // t2 = i * n
  84:	02a283b3          	mul	t2,t0,a0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:78
    add  t2, t2, t1         // t2 = i * n + j
  88:	006383b3          	add	t2,t2,t1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:79
    slli t2, t2, 2         // t2 = (i * n + j) * 4
  8c:	00239393          	slli	t2,t2,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:80
    add  t3, a3, t2         // t3 = dirección de z[i][j]
  90:	00768e33          	add	t3,a3,t2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:81
    sw   x0, 0(t3)         // z[i][j] = 0
  94:	000e2023          	sw	zero,0(t3)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:83

    mv   t4, x0             // t4 = k
  98:	00000e93          	li	t4,0

0000009c <ciclo_k_mult>:
ciclo_k_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:85
ciclo_k_mult:
    bgt  t4, a0, siguiente_j_mult  // Si k > n, saltar al siguiente j
  9c:	05d54263          	blt	a0,t4,e0 <siguiente_j_mult>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:88

    // Cargar x[i][k]:
    mul  t5, t0, a0         // t5 = i * n
  a0:	02a28f33          	mul	t5,t0,a0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:89
    add  t5, t5, t4         // t5 = i * n + k
  a4:	01df0f33          	add	t5,t5,t4
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:90
    slli t5, t5, 2         // t5 = (i * n + k) * 4
  a8:	002f1f13          	slli	t5,t5,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:91
    add  t5, a1, t5         // t5 = dirección de x[i][k]
  ac:	01e58f33          	add	t5,a1,t5
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:92
    lw   t5, 0(t5)         // t5 = x[i][k]
  b0:	000f2f03          	lw	t5,0(t5)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:95

    // Cargar y[k][j]:
    mul  t6, t4, a0         // t6 = k * n
  b4:	02ae8fb3          	mul	t6,t4,a0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:96
    add  t6, t6, t1         // t6 = k * n + j
  b8:	006f8fb3          	add	t6,t6,t1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:97
    slli t6, t6, 2         // t6 = (k * n + j) * 4
  bc:	002f9f93          	slli	t6,t6,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:98
    add  t6, a2, t6         // t6 = dirección de y[k][j]
  c0:	01f60fb3          	add	t6,a2,t6
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:99
    lw   t6, 0(t6)         // t6 = y[k][j]
  c4:	000faf83          	lw	t6,0(t6)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:102

    // Multiplicar y acumular en z[i][j]:
    mul  t5, t5, t6         // t5 = x[i][k] * y[k][j]
  c8:	03ff0f33          	mul	t5,t5,t6
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:103
    lw   t6, 0(t3)         // t6 = z[i][j] actual
  cc:	000e2f83          	lw	t6,0(t3)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:104
    add  t6, t6, t5         // t6 = z[i][j] + (x[i][k] * y[k][j])
  d0:	01ef8fb3          	add	t6,t6,t5
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:105
    sw   t6, 0(t3)         // Guardar z[i][j]
  d4:	01fe2023          	sw	t6,0(t3)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:107

    addi t4, t4, 1         // k++
  d8:	001e8e93          	addi	t4,t4,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:108
    j    ciclo_k_mult       // Repetir para el siguiente k
  dc:	fc1ff06f          	j	9c <ciclo_k_mult>

000000e0 <siguiente_j_mult>:
siguiente_j_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:111

siguiente_j_mult:
    addi t1, t1, 1         // j++
  e0:	00130313          	addi	t1,t1,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:112
    j    ciclo_j_mult
  e4:	f9dff06f          	j	80 <ciclo_j_mult>

000000e8 <siguiente_i_mult>:
siguiente_i_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:115

siguiente_i_mult:
    addi t0, t0, 1         // i++
  e8:	00128293          	addi	t0,t0,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:116
    j    ciclo_i_mult
  ec:	f8dff06f          	j	78 <ciclo_i_mult>

000000f0 <fin_mult>:
fin_mult():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:119

fin_mult:
    lw   ra, 12(sp)
  f0:	00c12083          	lw	ra,12(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:120
    lw   s0, 8(sp)
  f4:	00812403          	lw	s0,8(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:121
    lw   s1, 4(sp)
  f8:	00412483          	lw	s1,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:122
    lw   s2, 0(sp)
  fc:	00012903          	lw	s2,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:123
    addi sp, sp, 16
 100:	01010113          	addi	sp,sp,16
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:124
    ret
 104:	00008067          	ret

00000108 <matrixPow>:
matrixPow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:131
    .globl matrixPow
// void matrixPow(int n, int x[n][n], int e, int z[n][n])
// Se crea en la pila la matriz auxiliar aux.
matrixPow:
    // Prologo: guardamos s0-s6 (s6 se usará para guardar el puntero a aux)
    addi    sp, sp, -32
 108:	fe010113          	addi	sp,sp,-32
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:132
    sw      s0, 0(sp)
 10c:	00812023          	sw	s0,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:133
    sw      s1, 4(sp)
 110:	00912223          	sw	s1,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:134
    sw      s2, 8(sp)
 114:	01212423          	sw	s2,8(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:135
    sw      s3, 12(sp)
 118:	01312623          	sw	s3,12(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:136
    sw      s4, 16(sp)
 11c:	01412823          	sw	s4,16(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:137
    sw      s5, 20(sp)
 120:	01512a23          	sw	s5,20(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:138
    sw      s6, 24(sp)
 124:	01612c23          	sw	s6,24(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:139
    sw 		ra, 28(sp)
 128:	00112e23          	sw	ra,28(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:141

    mv      s0, a0         // s0 = n
 12c:	00050413          	mv	s0,a0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:142
    mv      s4, a3         // s4 = puntero a z (resultado)
 130:	00068a13          	mv	s4,a3
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:143
    mv      s5, a1         // s5 = puntero a x
 134:	00058a93          	mv	s5,a1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:146

    // Calcular tamaño de aux: aux_size = n*n*4
    mul     t0, s0, s0
 138:	028402b3          	mul	t0,s0,s0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:147
    slli    t0, t0, 2      // t0 = n*n*4
 13c:	00229293          	slli	t0,t0,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:149
    // Reservar espacio para aux en la pila
    sub     sp, sp, t0
 140:	40510133          	sub	sp,sp,t0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:150
    mv      s6, sp         // s6 = puntero a aux (se guarda en s6, registro salvado)
 144:	00010b13          	mv	s6,sp
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:153

    // Inicializar z a la matriz identidad:
    li      s1, 0         // s1 = índice j
 148:	00000493          	li	s1,0

0000014c <init_loop_j_pow>:
init_loop_j_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:155
init_loop_j_pow:
    bge     s1, s0, init_done_pow
 14c:	0484d063          	bge	s1,s0,18c <init_done_pow>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:156
    li      s2, 0         // s2 = índice k
 150:	00000913          	li	s2,0

00000154 <init_loop_k_pow>:
init_loop_k_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:158
init_loop_k_pow:
    bge     s2, s0, next_j_init_pow
 154:	02895863          	bge	s2,s0,184 <next_j_init_pow>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:160
    // Calcular dirección de z[j][k]: offset = (j*n+k)*4
    mul     t2, s1, s0
 158:	028483b3          	mul	t2,s1,s0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:161
    add     t2, t2, s2
 15c:	012383b3          	add	t2,t2,s2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:162
    slli    t2, t2, 2
 160:	00239393          	slli	t2,t2,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:163
    add     t2, s4, t2    // t2 = &z[j][k]
 164:	007a03b3          	add	t2,s4,t2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:165
    // Si j == k -> 1, sino 0
    beq     s1, s2, set_one_pow
 168:	01248663          	beq	s1,s2,174 <set_one_pow>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:166
    li      t3, 0
 16c:	00000e13          	li	t3,0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:167
    j       store_z_pow
 170:	0080006f          	j	178 <store_z_pow>

00000174 <set_one_pow>:
set_one_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:169
set_one_pow:
    li      t3, 1
 174:	00100e13          	li	t3,1

00000178 <store_z_pow>:
store_z_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:171
store_z_pow:
    sw      t3, 0(t2)
 178:	01c3a023          	sw	t3,0(t2)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:172
    addi    s2, s2, 1
 17c:	00190913          	addi	s2,s2,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:173
    j       init_loop_k_pow
 180:	fd5ff06f          	j	154 <init_loop_k_pow>

00000184 <next_j_init_pow>:
next_j_init_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:175
next_j_init_pow:
    addi    s1, s1, 1
 184:	00148493          	addi	s1,s1,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:176
    j       init_loop_j_pow
 188:	fc5ff06f          	j	14c <init_loop_j_pow>

0000018c <init_done_pow>:
init_done_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:179
init_done_pow:
    // Guardar el exponente (e) en t4
    mv      t4, a2        // t4 = e
 18c:	00060e93          	mv	t4,a2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:180
    li      s3, 1         // s3 = contador de potencia (inicia en 1)
 190:	00100993          	li	s3,1

00000194 <exp_loop_pow>:
exp_loop_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:182
exp_loop_pow:
    bgt     s3, t4, exp_done_pow
 194:	033ec863          	blt	t4,s3,1c4 <exp_done_pow>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:185
    // Llamada a: matrixMul(n, x, z, aux)
    // Se usan: a0 = n, a1 = x (guardado en s5), a2 = z (guardado en s4), a3 = aux (guardado en s6)
    mv      a0, s0
 198:	00040513          	mv	a0,s0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:186
    mv      a1, s5
 19c:	000a8593          	mv	a1,s5
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:187
    mv      a2, s4
 1a0:	000a0613          	mv	a2,s4
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:188
    mv      a3, s6       // ¡Usamos s6 (registro salvado) para aux!
 1a4:	000b0693          	mv	a3,s6
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:189
    call    matrixMul
 1a8:	eb5ff0ef          	jal	ra,5c <matrixMul>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:191
    // Llamada a: matrixCopy(n, aux, z)
    mv      a0, s0
 1ac:	00040513          	mv	a0,s0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:192
    mv      a1, s6       // aux
 1b0:	000b0593          	mv	a1,s6
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:193
    mv      a2, s4
 1b4:	000a0613          	mv	a2,s4
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:194
    call    matrixCopy
 1b8:	e49ff0ef          	jal	ra,0 <matrixCopy>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:195
    addi    s3, s3, 1
 1bc:	00198993          	addi	s3,s3,1
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:196
    j       exp_loop_pow
 1c0:	fd5ff06f          	j	194 <exp_loop_pow>

000001c4 <exp_done_pow>:
exp_done_pow():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:200
exp_done_pow:
    // Liberar espacio reservado para aux (se suma t0 a sp)
    //sub     s6, s6, sp
    mul     t0, s0, s0
 1c4:	028402b3          	mul	t0,s0,s0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:201
    slli    t0, t0, 2      // t0 = n*n*4
 1c8:	00229293          	slli	t0,t0,0x2
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:202
    add     sp, sp, t0
 1cc:	00510133          	add	sp,sp,t0
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:204
    // Restaurar registros salvados y liberar marco de pila
    lw 		ra, 28(sp)
 1d0:	01c12083          	lw	ra,28(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:205
    lw      s6, 24(sp)
 1d4:	01812b03          	lw	s6,24(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:206
    lw      s5, 20(sp)
 1d8:	01412a83          	lw	s5,20(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:207
    lw      s4, 16(sp)
 1dc:	01012a03          	lw	s4,16(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:208
    lw      s3, 12(sp)
 1e0:	00c12983          	lw	s3,12(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:209
    lw      s2, 8(sp)
 1e4:	00812903          	lw	s2,8(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:210
    lw      s1, 4(sp)
 1e8:	00412483          	lw	s1,4(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:211
    lw      s0, 0(sp)
 1ec:	00012403          	lw	s0,0(sp)
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:212
    addi    sp, sp, 32
 1f0:	02010113          	addi	sp,sp,32
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../fun_asm.asm:213
    ret
 1f4:	00008067          	ret

Disassembly of section .text.main:

000001f8 <main>:
main():
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../pr5.c:79
 matrixMul(n, x, z, aux);
 matrixCopy(n, aux, z);
 }
}
*/
void main() {
 1f8:	ff010113          	addi	sp,sp,-16
 1fc:	00112623          	sw	ra,12(sp)
 200:	00812423          	sw	s0,8(sp)
 204:	01010413          	addi	s0,sp,16
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../pr5.c:81

    matrixPow(N, graph, STEPS, z);
 208:	000107b7          	lui	a5,0x10
 20c:	06478693          	addi	a3,a5,100 # 10064 <z>
 210:	00300613          	li	a2,3
 214:	000107b7          	lui	a5,0x10
 218:	00078593          	mv	a1,a5
 21c:	00500513          	li	a0,5
 220:	ee9ff0ef          	jal	ra,108 <matrixPow>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../pr5.c:82
    paths = z[ORG][DST];
 224:	000107b7          	lui	a5,0x10
 228:	06478793          	addi	a5,a5,100 # 10064 <z>
 22c:	00c7a703          	lw	a4,12(a5)
 230:	000107b7          	lui	a5,0x10
 234:	0ce7a423          	sw	a4,200(a5) # 100c8 <paths>
C:\Users\ivi17\Downloads\practicafc2\pr5\Debug/../pr5.c:83 (discriminator 1)
	while(1);
 238:	0000006f          	j	238 <main+0x40>
